import asyncio
import json
import os
from datetime import datetime, timedelta
from typing import Dict, Any
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

load_dotenv()
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "salary_data.json"


class SalaryStates(StatesGroup):
    waiting_for_rate = State()
    waiting_for_time = State()


class SalaryBot:
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.data = self.load_data()
        self.setup_handlers()

    def load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(DATA_FILE):
            try:
                with open(DATA_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)

    def get_user_data(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.data:
            self.data[user_id] = {
                "rate": 0,
                "work_sessions": {}
            }
        return self.data[user_id]

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""

        @self.dp.message(Command("start"))
        async def start_command(message: Message, state: FSMContext):
            user_id = str(message.from_user.id)
            user_data = self.get_user_data(user_id)

            welcome_text = (
                "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã!\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫.\n\n"
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/setrate - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É (—Ä—É–±/—á–∞—Å)\n"
                "/addtime - –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
                "/today - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                "/yesterday - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –≤—á–µ—Ä–∞\n"
                "/week - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
                "/month - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü\n"
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            )

            if user_data["rate"] > 0:
                welcome_text += f"üí∞ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {user_data['rate']} —Ä—É–±/—á–∞—Å"
            else:
                welcome_text += "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /setrate"

            await message.answer(welcome_text)

        @self.dp.message(Command("help"))
        async def help_command(message: Message):
            help_text = (
                "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
                "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/setrate - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É (—Ä—É–±/—á–∞—Å)\n"
                "/addtime - –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
                "/today - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                "/yesterday - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –≤—á–µ—Ä–∞\n"
                "/week - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
                "/month - –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü\n\n"
                "üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ê–°–´ –ú–ò–ù–£–¢–´\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 8 30 (–æ–∑–Ω–∞—á–∞–µ—Ç 8 —á–∞—Å–æ–≤ 30 –º–∏–Ω—É—Ç)"
            )
            await message.answer(help_text)

        @self.dp.message(Command("setrate"))
        async def set_rate_command(message: Message, state: FSMContext):
            await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –≤ —Ä—É–±–ª—è—Ö –∑–∞ —á–∞—Å:")
            await state.set_state(SalaryStates.waiting_for_rate)

        @self.dp.message(SalaryStates.waiting_for_rate)
        async def process_rate(message: Message, state: FSMContext):
            try:
                rate = float(message.text)
                if rate <= 0:
                    await message.answer("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                    return

                user_id = str(message.from_user.id)
                user_data = self.get_user_data(user_id)
                user_data["rate"] = rate
                self.save_data()

                await message.answer(f"‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {rate} —Ä—É–±/—á–∞—Å")
                await state.clear()

            except ValueError:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

        @self.dp.message(Command("addtime"))
        async def add_time_command(message: Message, state: FSMContext):
            user_id = str(message.from_user.id)
            user_data = self.get_user_data(user_id)

            if user_data["rate"] <= 0:
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /setrate")
                return

            await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ê–°–´ –ú–ò–ù–£–¢–´\n–ù–∞–ø—Ä–∏–º–µ—Ä: 8 30")
            await state.set_state(SalaryStates.waiting_for_time)

        @self.dp.message(SalaryStates.waiting_for_time)
        async def process_time(message: Message, state: FSMContext):
            try:
                parts = message.text.strip().split()
                if len(parts) != 2:
                    await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ê–°–´ –ú–ò–ù–£–¢–´\n–ù–∞–ø—Ä–∏–º–µ—Ä: 8 30")
                    return

                hours = int(parts[0])
                minutes = int(parts[1])

                if hours < 0 or minutes < 0 or minutes >= 60:
                    await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è! –ß–∞—Å—ã ‚â• 0, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59")
                    return

                user_id = str(message.from_user.id)
                user_data = self.get_user_data(user_id)

                # –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞
                total_hours = hours + minutes / 60
                earnings = total_hours * user_data["rate"]

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                today = datetime.now().strftime("%Y-%m-%d")
                if today not in user_data["work_sessions"]:
                    user_data["work_sessions"][today] = {
                        "total_hours": 0,
                        "total_earnings": 0,
                        "sessions": []
                    }

                user_data["work_sessions"][today]["total_hours"] += total_hours
                user_data["work_sessions"][today]["total_earnings"] += earnings
                user_data["work_sessions"][today]["sessions"].append({
                    "hours": hours,
                    "minutes": minutes,
                    "earnings": earnings,
                    "timestamp": datetime.now().isoformat()
                })

                self.save_data()

                response = (
                    f"‚úÖ –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                    f"‚è∞ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours}—á {minutes}–º ({total_hours:.2f}—á)\n"
                    f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earnings:.2f} —Ä—É–±\n"
                    f"üìä –í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {user_data['work_sessions'][today]['total_hours']:.2f}—á = "
                    f"{user_data['work_sessions'][today]['total_earnings']:.2f} —Ä—É–±"
                )

                await message.answer(response)
                await state.clear()

            except ValueError:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞!")

        @self.dp.message(Command("today"))
        async def today_command(message: Message):
            user_id = str(message.from_user.id)
            user_data = self.get_user_data(user_id)

            today = datetime.now().strftime("%Y-%m-%d")

            if today in user_data["work_sessions"]:
                session = user_data["work_sessions"][today]
                response = (

                    f"üìä –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')}):\n\n"
                    f"‚è∞ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {session['total_hours']:.2f} —á–∞—Å–æ–≤\n"
                    f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {session['total_earnings']:.2f} —Ä—É–±"
                )
            else:
                response = "üìä –°–µ–≥–æ–¥–Ω—è –≤—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"

            await message.answer(response)

        @self.dp.message(Command("yesterday"))
        async def yesterday_command(message: Message):
            user_id = str(message.from_user.id)
            user_data = self.get_user_data(user_id)

            yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")

            if yesterday in user_data["work_sessions"]:
                session = user_data["work_sessions"][yesterday]
                response = (
                    f"üìä –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –≤—á–µ—Ä–∞ ({(datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')}):\n\n"
                    f"‚è∞ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {session['total_hours']:.2f} —á–∞—Å–æ–≤\n"
                    f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {session['total_earnings']:.2f} —Ä—É–±"
                )
            else:
                response = "üìä –í—á–µ—Ä–∞ –≤—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è"

            await message.answer(response)

        @self.dp.message(Command("week"))
        async def week_command(message: Message):
            user_id = str(message.from_user.id)
            user_data = self.get_user_data(user_id)

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            total_hours = 0
            total_earnings = 0
            days_worked = 0

            for i in range(7):
                date = (datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d")
                if date in user_data["work_sessions"]:
                    session = user_data["work_sessions"][date]
                    total_hours += session["total_hours"]
                    total_earnings += session["total_earnings"]
                    days_worked += 1

            if days_worked > 0:
                response = (
                    f"üìä –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
                    f"üìÖ –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {days_worked}\n"
                    f"‚è∞ –í—Å–µ–≥–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_hours:.2f} —á–∞—Å–æ–≤\n"
                    f"üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earnings:.2f} —Ä—É–±\n"
                    f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {total_earnings / days_worked:.2f} —Ä—É–±"
                )
            else:
                response = "üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞–±–æ—Ç–µ"

            await message.answer(response)

        @self.dp.message(Command("month"))
        async def month_command(message: Message):
            user_id = str(message.from_user.id)
            user_data = self.get_user_data(user_id)

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            total_hours = 0
            total_earnings = 0
            days_worked = 0

            for i in range(30):
                date = (datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d")
                if date in user_data["work_sessions"]:
                    session = user_data["work_sessions"][date]
                    total_hours += session["total_hours"]
                    total_earnings += session["total_earnings"]
                    days_worked += 1

            if days_worked > 0:
                response = (
                    f"üìä –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü:\n\n"
                    f"üìÖ –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {days_worked}\n"
                    f"‚è∞ –í—Å–µ–≥–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_hours:.2f} —á–∞—Å–æ–≤\n"
                    f"üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earnings:.2f} —Ä—É–±\n"
                    f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {total_earnings / days_worked:.2f} —Ä—É–±"
                )
            else:
                response = "üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞–±–æ—Ç–µ"

            await message.answer(response)

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await self.dp.start_polling(self.bot)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    bot = SalaryBot(BOT_TOKEN)
    await bot.start_bot()


if __name__ == "__main__":
    asyncio.run(main())
